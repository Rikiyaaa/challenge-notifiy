const { Client } = require('discord.js-selfbot-v13');
const axios = require('axios');
const { GoogleGenAI } = require('@google/genai');
const express = require('express');
require('dotenv').config();

// Configuration
const USER_TOKEN = process.env.USER_TOKEN;
const CHANNEL_IDS = {
  FIRST_CHANNEL: '1362084541170192455', // Challenge channel
  SECOND_CHANNEL: '1332169081314476063'  // Banner/Gacha channel
};

// LINE Configuration
const LINE_TOKEN = process.env.LINE_TOKEN;
const LINE_USER_ID = process.env.LINE_USER_ID;

// Gemini Configuration
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Discord Client
const client = new Client({
  checkUpdate: false
});

// Initialize Gemini
const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY });

// ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Carousel
const pendingImages = {
  [CHANNEL_IDS.FIRST_CHANNEL]: null, // Challenge image
  [`${CHANNEL_IDS.SECOND_CHANNEL}_standard`]: null, // Standard gacha
  [`${CHANNEL_IDS.SECOND_CHANNEL}_rateup`]: null, // Rate-up gacha
  lastUpdate: Date.now()
};

// ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏ö) - 3 ‡∏ô‡∏≤‡∏ó‡∏µ
const WAIT_TIME = 3 * 60 * 1000;

// Function to analyze image with Gemini (only for challenge images)
async function analyzeImageWithGemini(imageUrl) {
  try {
    console.log(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ Gemini: ${imageUrl}`);
    
    // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô buffer ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏î‡∏¥‡∏™‡∏Å‡πå
    const imageResponse = await axios.get(imageUrl, { 
      responseType: 'arraybuffer',
      timeout: 30000 // ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÄ‡∏õ‡πá‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    });
    
    let imageBuffer = Buffer.from(imageResponse.data);
    
    // ‡πÅ‡∏õ‡∏•‡∏á buffer ‡πÄ‡∏õ‡πá‡∏ô base64
    let base64Image = imageBuffer.toString('base64');
    
    // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà Gemini ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• Vision
    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash",
      contents: [
        {
          role: "user",
          parts: [
            { text: "‡∏£‡∏∞‡∏ö‡∏∏ item drops ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á item ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡πÄ‡∏•‡∏∞‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ item drops ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡πÄ‡∏Ñ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• item" },
            { 
              inlineData: {
                mimeType: "image/jpeg",
                data: base64Image
              }
            }
          ]
        }
      ]
    });
    
    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î buffer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ garbage collector ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    imageBuffer = null;
    base64Image = null;
    
    return response.text;
  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ Gemini:', error);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    }
    return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î";
  }
}

// ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
function extractItemNames(itemDropsText) {
  // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
  const lines = itemDropsText.split('\n');
  
  // ‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
  const itemNames = [];
  
  // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
  for (const line of lines) {
    // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á
    if (!line.trim()) continue;
    
    // ‡∏•‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ * ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    let cleanLine = line.trim();
    if (cleanLine.startsWith('*')) {
      cleanLine = cleanLine.substring(1).trim();
    }
    
    let itemName = "";
    
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö (x...) ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö
    const parenIndex = cleanLine.indexOf('(');
    if (parenIndex !== -1) {
      itemName = cleanLine.substring(0, parenIndex).trim();
    } 
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ x ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡πÄ‡∏ä‡πà‡∏ô x1-2, x3~5)
    else if (cleanLine.includes('x') && /x\d/.test(cleanLine)) {
      const xIndex = cleanLine.indexOf('x');
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ x ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÄ‡∏õ‡πá‡∏ô x ‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (xIndex > 0 && /\d/.test(cleanLine[xIndex + 1])) {
        itemName = cleanLine.substring(0, xIndex).trim();
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
        itemName = cleanLine.trim();
      }
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏î‡πÜ ‡∏•‡∏≠‡∏á‡πÅ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏£‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢
      const match = cleanLine.match(/^(.*?)(?:\d|%|,)/);
      if (match && match[1].trim()) {
        itemName = match[1].trim();
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏î‡πÜ ‡πÄ‡∏•‡∏¢ ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
        itemName = cleanLine.trim();
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå
    if (itemName) {
      itemNames.push(itemName);
    }
  }
  
  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ
  return itemNames.join(', ');
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á bubble ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Challenge (FIRST_CHANNEL)
function createChallengeBubble(imageUrl, itemDropsText, author) {
  return {
    type: "bubble",
    hero: {
      type: "image",
      url: imageUrl,
      size: "full",
      aspectRatio: "20:13",
      aspectMode: "cover"
    },
    body: {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "text",
          text: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Challenge",
          weight: "bold",
          size: "xl",
          color: "#27ACB2"
        },
        {
          type: "box",
          layout: "vertical",
          margin: "lg",
          spacing: "sm",
          contents: [
            {
              type: "text",
              text: "üéÅ ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•",
              weight: "bold",
              color: "#aaaaaa"
            },
            {
              type: "box",
              layout: "vertical",
              margin: "lg",
              contents: [
                {
                  type: "text",
                  text: itemDropsText,
                  wrap: true,
                  size: "sm"
                }
              ]
            },
            {
              type: "separator",
              margin: "md"
            },
            {
              type: "box",
              layout: "baseline",
              spacing: "sm",
              margin: "md",
              contents: [
                {
                  type: "text",
                  text: "üë§",
                  color: "#aaaaaa",
                  size: "sm",
                  flex: 1
                },
                {
                  type: "text",
                  text: author,
                  wrap: true,
                  color: "#666666",
                  size: "sm",
                  flex: 5
                }
              ]
            },
            {
              type: "box",
              layout: "baseline",
              spacing: "sm",
              contents: [
                {
                  type: "text",
                  text: "‚è∞",
                  color: "#aaaaaa",
                  size: "sm",
                  flex: 1
                },
                {
                  type: "text",
                  text: new Date().toLocaleString('th-TH'),
                  wrap: true,
                  color: "#666666",
                  size: "sm",
                  flex: 5
                }
              ]
            }
          ]
        }
      ]
    },
    footer: {
      type: "box",
      layout: "vertical",
      spacing: "sm",
      contents: [
        {
          type: "button",
          style: "primary",
          height: "sm",
          action: {
            type: "uri",
            label: "‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
            uri: imageUrl
          },
          color: "#27ACB2"
        }
      ],
      flex: 0
    }
  };
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á bubble ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gacha Banner (SECOND_CHANNEL)
function createBannerBubble(imageUrl, author, isStandard) {
  return {
    type: "bubble",
    hero: {
      type: "image",
      url: imageUrl,
      size: "full",
      aspectRatio: "20:13",
      aspectMode: "cover"
    },
    body: {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "text",
          text: isStandard ? "Standard Gacha" : "Rate-up Gacha",
          weight: "bold",
          size: "xl",
          color: isStandard ? "#E32C82" : "#B600FF"
        },
        {
          type: "box",
          layout: "vertical",
          margin: "lg",
          spacing: "sm",
          contents: [
            {
              type: "text",
              text: "üìÖ Summon Banner",
              weight: "bold",
              color: "#aaaaaa"
            },
            {
              type: "separator",
              margin: "md"
            },
            {
              type: "box",
              layout: "baseline",
              spacing: "sm",
              margin: "md",
              contents: [
                {
                  type: "text",
                  text: "üë§",
                  color: "#aaaaaa",
                  size: "sm",
                  flex: 1
                },
                {
                  type: "text",
                  text: author,
                  wrap: true,
                  color: "#666666",
                  size: "sm",
                  flex: 5
                }
              ]
            },
            {
              type: "box",
              layout: "baseline",
              spacing: "sm",
              contents: [
                {
                  type: "text",
                  text: "‚è∞",
                  color: "#aaaaaa",
                  size: "sm",
                  flex: 1
                },
                {
                  type: "text",
                  text: new Date().toLocaleString('th-TH'),
                  wrap: true,
                  color: "#666666",
                  size: "sm",
                  flex: 5
                }
              ]
            }
          ]
        }
      ]
    },
    footer: {
      type: "box",
      layout: "vertical",
      spacing: "sm",
      contents: [
        {
          type: "button",
          style: "primary",
          height: "sm",
          action: {
            type: "uri",
            label: "‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
            uri: imageUrl
          },
          color: isStandard ? "#FF6B00" : "#B600FF"
        }
      ],
      flex: 0
    }
  };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á Carousel Flex Message
async function sendCarouselToLine() {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏™‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const hasChallenge = pendingImages[CHANNEL_IDS.FIRST_CHANNEL];
    const hasStandardGacha = pendingImages[`${CHANNEL_IDS.SECOND_CHANNEL}_standard`];
    const hasRateUpGacha = pendingImages[`${CHANNEL_IDS.SECOND_CHANNEL}_rateup`];
    
    if (!hasChallenge && !hasStandardGacha && !hasRateUpGacha) {
      console.log('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏™‡πà‡∏á');
      return;
    }

    const bubbles = [];
    let itemNamesForAltText = [];
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° bubble ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û Challenge (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (hasChallenge) {
      const { imageUrl, itemDropsText, author } = hasChallenge;
      bubbles.push(createChallengeBubble(imageUrl, itemDropsText, author));
      
      // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠ item ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö altText
      const itemNames = extractItemNames(itemDropsText);
      if (itemNames) {
        itemNamesForAltText.push(itemNames);
      }
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° bubble ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Standard Gacha (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (hasStandardGacha) {
      const { imageUrl, author } = hasStandardGacha;
      bubbles.push(createBannerBubble(imageUrl, author, true));
      itemNamesForAltText.push("Standard Gacha");
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° bubble ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Rate-up Gacha (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (hasRateUpGacha) {
      const { imageUrl, author } = hasRateUpGacha;
      bubbles.push(createBannerBubble(imageUrl, author, false));
      itemNamesForAltText.push("Rate-up Gacha");
    }
    
    if (bubbles.length === 0) {
      console.log('‡πÑ‡∏°‡πà‡∏°‡∏µ bubble ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á');
      return;
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á altText ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠ item
    const altText = itemNamesForAltText.join(', ').substring(0, 150); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß altText
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Carousel Flex Message
    const carouselMessage = {
      type: "flex",
      altText: altText || "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Challenge ‡πÅ‡∏•‡∏∞ Gacha",
      contents: {
        type: "carousel",
        contents: bubbles
      }
    };

    // ‡∏™‡πà‡∏á Carousel ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
    await axios.post('https://api.line.me/v2/bot/message/push', {
      to: LINE_USER_ID,
      messages: [carouselMessage]
    }, {
      headers: {
        'Authorization': `Bearer ${LINE_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`‡∏™‡πà‡∏á Carousel Flex Message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${bubbles.length} ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)`);
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏™‡πà‡∏á
    pendingImages[CHANNEL_IDS.FIRST_CHANNEL] = null;
    pendingImages[`${CHANNEL_IDS.SECOND_CHANNEL}_standard`] = null;
    pendingImages[`${CHANNEL_IDS.SECOND_CHANNEL}_rateup`] = null;
    pendingImages.lastUpdate = Date.now();
    
  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Carousel Flex Message:', error);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Challenge Channel
async function addChallengeImage(imageUrl, author) {
  try {
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û Challenge ‡∏î‡πâ‡∏ß‡∏¢ Gemini
    const itemDropsText = await analyzeImageWithGemini(imageUrl);
    console.log(`‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û Challenge:`, itemDropsText);
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    pendingImages[CHANNEL_IDS.FIRST_CHANNEL] = {
      imageUrl,
      itemDropsText,
      author
    };
    pendingImages.lastUpdate = Date.now();
    
    console.log(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û Challenge ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏£‡∏≠‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á Carousel ‡πÄ‡∏•‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    checkIfShouldSendCarousel();
  } catch (error) {
    console.error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û Challenge ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏£‡∏≠‡∏™‡πà‡∏á:`, error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Banner Channel
async function addBannerImage(imageUrl, author, isStandard) {
  try {
    const key = isStandard ? 
      `${CHANNEL_IDS.SECOND_CHANNEL}_standard` : 
      `${CHANNEL_IDS.SECOND_CHANNEL}_rateup`;
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Gemini)
    pendingImages[key] = {
      imageUrl,
      author
    };
    pendingImages.lastUpdate = Date.now();
    
    console.log(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ${isStandard ? 'Standard' : 'Rate-up'} Gacha ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏£‡∏≠‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á Carousel ‡πÄ‡∏•‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    checkIfShouldSendCarousel();
  } catch (error) {
    console.error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û Banner ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏£‡∏≠‡∏™‡πà‡∏á:`, error);
  }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á Carousel ‡πÄ‡∏•‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
function checkIfShouldSendCarousel() {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏°‡∏µ Challenge + Standard Gacha + Rate-up Gacha)
  if (pendingImages[CHANNEL_IDS.FIRST_CHANNEL] && 
      pendingImages[`${CHANNEL_IDS.SECOND_CHANNEL}_standard`] && 
      pendingImages[`${CHANNEL_IDS.SECOND_CHANNEL}_rateup`]) {
    console.log('‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á 3 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á Carousel Flex Message...');
    sendCarouselToLine();
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏£‡∏≠‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞
function checkPendingQueue() {
  const now = Date.now();
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏£‡∏≠‡∏™‡πà‡∏á ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏°‡∏≤‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤ WAIT_TIME ‡πÅ‡∏•‡πâ‡∏ß
  if ((pendingImages[CHANNEL_IDS.FIRST_CHANNEL] || 
       pendingImages[`${CHANNEL_IDS.SECOND_CHANNEL}_standard`] || 
       pendingImages[`${CHANNEL_IDS.SECOND_CHANNEL}_rateup`]) && 
      (now - pendingImages.lastUpdate >= WAIT_TIME)) {
    console.log(`‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤ ${WAIT_TIME / 60000} ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á Carousel Flex Message ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà...`);
    sendCarouselToLine();
  }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö Banner Images (‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Standard ‡∏´‡∏£‡∏∑‡∏≠ Rate-up)
let lastBannerImageTimestamp = 0;
async function processBannerImage(imageUrl, author, timestamp) {
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà
  if (timestamp - lastBannerImageTimestamp > 60000) {
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Gacha Images
    pendingImages[`${CHANNEL_IDS.SECOND_CHANNEL}_standard`] = null;
    pendingImages[`${CHANNEL_IDS.SECOND_CHANNEL}_rateup`] = null;
    
    // ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô Standard Gacha
    await addBannerImage(imageUrl, author, true);
  } else {
    // ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô Rate-up Gacha
    await addBannerImage(imageUrl, author, false);
  }
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  lastBannerImageTimestamp = timestamp;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
async function fetchLatestMessages(channelId) {
  try {
    console.log(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á ${channelId}...`);
    const channel = await client.channels.fetch(channelId);
    
    if (!channel) {
      console.error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á ${channelId}`);
      return;
    }
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 10 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const messages = await channel.messages.fetch({ limit: 10 });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 10 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
    const tenMinutesAgo = Date.now() - 10 * 60 * 1000;
    
    let processedImages = 0;
    
    for (const message of messages.values()) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 10 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
      if (message.createdTimestamp > tenMinutesAgo && message.attachments.size > 0) {
        for (const attachment of message.attachments.values()) {
          if (attachment.contentType && attachment.contentType.startsWith('image/')) {
            console.log(`‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å ${message.author.username} ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á ${channelId}: ${attachment.url}`);
            
            if (channelId === CHANNEL_IDS.FIRST_CHANNEL) {
              // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Challenge Channel ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö
              if (processedImages === 0) {
                await addChallengeImage(attachment.url, message.author.username);
                processedImages++;
                break;
              }
            } else if (channelId === CHANNEL_IDS.SECOND_CHANNEL) {
              // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Banner Channel ‡πÄ‡∏£‡∏≤‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ 2 ‡∏£‡∏π‡∏õ
              if (processedImages < 2) {
                await processBannerImage(attachment.url, message.author.username, message.createdTimestamp);
                processedImages++;
              }
            }
          }
        }
        
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Banner Channel ‡πÄ‡∏£‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö 2 ‡∏£‡∏π‡∏õ‡πÅ‡∏•‡πâ‡∏ß
        if (channelId === CHANNEL_IDS.SECOND_CHANNEL && processedImages >= 2) {
          break;
        }
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Challenge Channel ‡πÄ‡∏£‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö 1 ‡∏£‡∏π‡∏õ‡πÅ‡∏•‡πâ‡∏ß
        else if (channelId === CHANNEL_IDS.FIRST_CHANNEL && processedImages >= 1) {
          break;
        }
      }
    }
    
    if (processedImages === 0) {
      console.log(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á ${channelId}`);
    }
  } catch (error) {
    console.error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á ${channelId}:`, error);
  }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°
client.on('ready', async () => {
  console.log(`‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ${client.user.tag}`);
  console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á Discord ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô Carousel Flex Message...');
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á 2 ‡∏ä‡πà‡∏≠‡∏á
  await fetchLatestMessages(CHANNEL_IDS.FIRST_CHANNEL);
  await fetchLatestMessages(CHANNEL_IDS.SECOND_CHANNEL);
  
  // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏£‡∏≠‡∏™‡πà‡∏á‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
  setInterval(checkPendingQueue, 60 * 1000);
  
  // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ
  setInterval(async () => {
    await fetchLatestMessages(CHANNEL_IDS.FIRST_CHANNEL);
    await fetchLatestMessages(CHANNEL_IDS.SECOND_CHANNEL);
  }, 10 * 60 * 1000);
});

// ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà (real-time)
client.on('messageCreate', async message => {
  const channelId = message.channelId;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (channelId === CHANNEL_IDS.FIRST_CHANNEL || channelId === CHANNEL_IDS.SECOND_CHANNEL) {
    // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    if (message.attachments.size > 0) {
      for (const attachment of message.attachments.values()) {
        if (attachment.contentType && attachment.contentType.startsWith('image/')) {
          try {
            console.log(`‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å ${message.author.username} ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á ${channelId}: ${attachment.url}`);
            
            if (channelId === CHANNEL_IDS.FIRST_CHANNEL) {
              // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Challenge Channel
              await addChallengeImage(attachment.url, message.author.username);
              break; // ‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏Å
            } else if (channelId === CHANNEL_IDS.SECOND_CHANNEL) {
              // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Banner Channel
              await processBannerImage(attachment.url, message.author.username, message.createdTimestamp);
            }
          } catch (error) {
            console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:', error);
          }
        }
      }
    }
  }
});

// ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
client.on('error', error => {
  console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Discord:', error);
});

// ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
client.on('disconnect', event => {
  console.log('‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å Discord:', event);
  console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà...');
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Web Server ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏ô hosting ‡πÑ‡∏î‡πâ
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/', (req, res) => {
  res.send('Discord-LINE Integration Bot is running!');
});

app.get('/status', (req, res) => {
  const status = {
    discord: client.user ? `Connected as ${client.user.tag}` : 'Disconnected',
    pendingImages: {
      challenge: pendingImages[CHANNEL_IDS.FIRST_CHANNEL] ? 'Waiting' : 'None',
      standardGacha: pendingImages[`${CHANNEL_IDS.SECOND_CHANNEL}_standard`] ? 'Waiting' : 'None',
      rateupGacha: pendingImages[`${CHANNEL_IDS.SECOND_CHANNEL}_rateup`] ? 'Waiting' : 'None',
      lastUpdate: new Date(pendingImages.lastUpdate).toLocaleString('th-TH')
    },
    uptime: Math.floor(process.uptime()) + ' seconds'
  };
  
  res.json(status);
});

// ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á carousel ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà
app.get('/send', async (req, res) => {
  try {
    await sendCarouselToLine();
    res.send('Carousel sent successfully!');
  } catch (error) {
    res.status(500).send('Error sending carousel: ' + error.message);
  }
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á
app.get('/fetch', async (req, res) => {
  try {
    await fetchLatestMessages(CHANNEL_IDS.FIRST_CHANNEL);
    await fetchLatestMessages(CHANNEL_IDS.SECOND_CHANNEL);
    res.send('Messages fetched successfully!');
  } catch (error) {
    res.status(500).send('Error fetching messages: ' + error.message);
  }
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Web Server
app.listen(PORT, () => {
  console.log(`Web Server ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏£‡πå‡∏ï ${PORT}`);
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î
process.on('uncaughtException', (error) => {
  console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î:', error);
});

process.on('unhandledRejection', (error) => {
  console.error('‡πÄ‡∏Å‡∏¥‡∏î Promise rejection ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:', error);
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ restart bot ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ memory leak
function scheduleRestart() {
  // restart ‡∏ó‡∏∏‡∏Å 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  const restartInterval = 24 * 60 * 60 * 1000;
  
  setTimeout(() => {
    console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á restart bot ‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤...');
    process.exit(0); // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° (‡πÉ‡∏´‡πâ process manager ‡πÄ‡∏ä‡πà‡∏ô PM2 restart)
  }, restartInterval);
  
  console.log(`‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤ restart bot ‡∏ó‡∏∏‡∏Å ${restartInterval / (60 * 60 * 1000)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`);
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á bot
async function main() {
  try {
    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Discord
    await client.login(USER_TOKEN);
    
    // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤ restart
    scheduleRestart();
    
  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°:', error);
    process.exit(1);
  }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
main();
